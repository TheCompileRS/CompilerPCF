# base
let rec suma  (x y: Nat) : Nat = x + y
let rec resta (x y: Nat) : Nat = x - y
let rec mult  (x y: Nat) : Nat = ifz y then 0 else suma (mult x (pred y)) x
let rec exp   (x y: Nat) : Nat = ifz y then 1 else mult (exp x (pred y)) x
let rec fact  (n: Nat)   : Nat = ifz n then 1 else mult n (fact (pred n))

# booleanos
type Bool = Nat
let true  : Bool = 1
let false : Bool = 0
let neg (b: Bool) : Bool = 1 - b

# pares de naturales
let pairNat (x y b: Nat) : Nat = ifz b then x else y   
let fstNat (p: Nat -> Nat) : Nat = p false
let sndNat (p: Nat -> Nat) : Nat = p true

# R para naturales
let RNat (z: Nat) (s: Nat -> Nat -> Nat) : Nat -> Nat
    = fix (f: Nat -> Nat) (n: Nat) -> 
        ifz n then z else s (f (pred n)) (pred n)

# minimizador
let mu (f: Nat -> Nat) : Nat 
    = let rec try (n: Nat) : Nat = ifz f n then n else try (succ n)
      in try 0

# tailcall suma
let rec tcsuma (m n : Nat) : Nat =
    ifz n then m
          else tcsuma (succ m) (pred n)

# while true (no debe dar volcado de pila)
let rec whiletrue (x : Nat) : Nat = whiletrue x

# debe dar 3628800
let ans : Nat = fact 10
